name: "Run Tests"
description: "Starts services, runs Pytest with Coverage and Allure, and uploads results"

inputs:
  codecov-token:
    description: "Codecov token for uploading reports"
    required: true
  docker-username:
    description: "Docker Hub username"
    required: true
  docker-password:
    description: "Docker Hub password or access token"
    required: true

runs:
  using: composite
  steps:
    - name: Setup Python and UV
      uses: ./.github/actions/setup

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Registry
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-password }}

    - name: Build and Cache Docker image
      run: |
        export CACHE_REF=1cylon1/interview:cache

        docker buildx bake backend \
        --set "*.cache-from=type=registry,ref=${CACHE_REF}" \
        --set "*.cache-to=type=registry,ref=${CACHE_REF},mode=max" \
        --set "backend.tags=interview-backend:latest" \
        --load
      shell: bash

    - name: Start services with Docker Compose
      run: docker compose up -d --no-build
      shell: bash

    - name: Wait for backend to be healthy
      run: |
        timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/health)" != "200" ]]; do echo "Waiting for backend..."; sleep 5; done'
        echo "Backend is healthy!"
      shell: bash

    - name: Install Playwright Browsers
      run: uv run playwright install --with-deps
      shell: bash

    - name: Create directories for results
      run: |
        mkdir -p allure-results
        mkdir -p coverage-results
      shell: bash

    - name: Run Pytest with Coverage
      run: |
        uv run pytest \
          -v --durations=0 \
          --cov=backend/app \
          --cov-report=xml:coverage-results/coverage.xml \
          --cov-report=html:coverage-results/htmlcov \
          --cov-report=term-missing \
          --alluredir=allure-results
      shell: bash

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ inputs.codecov-token }}
        slug: ZhikharevAl/interview

    - name: Store Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results
        path: allure-results
        retention-days: 30

    - name: Store Coverage Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-results
        path: coverage-results
        retention-days: 30
